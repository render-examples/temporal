databases:
- name: temporal-db
  databaseName: temporal
  user: temporal
  plan: Starter
  region: oregon

envVarGroups:
  - name: temporal-shared
    envVars:
    - key: DYNAMIC_CONFIG_FILE_PATH
      value: /etc/temporal/dynamicconfig_es.yaml
    - key: ENABLE_ES
      value: true
    - key: ES_VERSION
      value: v7
    - key: ES_USER
      value: elastic
    - key: DB
      value: postgresql

services:
- type: pserv
  name: temporal-elasticsearch
  autoDeploy: false
  plan: Starter
  region: oregon
  env: docker
  dockerfilePath: ./temporal-cluster/elasticsearch/Dockerfile
  disk:
    name: esdata
    mountPath: /usr/share/elasticsearch/data
    sizeGB: 10
  envVars:
  - key: PORT
    value: 9200
  - key: ES_JAVA_OPTS
    value: "-Xms100m -Xmx100m"
  - key: xpack.security.enabled
    value: true
  - key: ELASTIC_PASSWORD
    generateValue: true
  - key: cluster.routing.allocation.disk.threshold_enabled
    value: true
  - key: cluster.routing.allocation.disk.watermark.low
    value: 512mb
  - key: cluster.routing.allocation.disk.watermark.high
    value: 256mb
  - key: cluster.routing.allocation.disk.watermark.flood_stage
    value: 128mb
  - key: discovery.type
    value: single-node
- type: pserv
  name: temporal-frontend
  autoDeploy: false
  plan: Starter
  region: oregon
  env: docker
  dockerfilePath: ./temporal-cluster/server/auto-setup/Dockerfile
  scaling:
    minInstances: 1
    maxInstances: 3
    targetMemoryPercent: 80
    targetCPUPercent: 80
  envVars:
  - fromGroup: temporal-shared
  - key: SERVICES
    value: frontend
  - key: SKIP_POSTGRES_DB_CREATION
    value: true
  - key: SKIP_VISIBILITY_DB_SETUP
    value: true
  - key: ES_SEEDS
    fromService:
      name: temporal-elasticsearch
      type: pserv
      property: host
  - key: ES_PWD
    fromService:
      name: temporal-elasticsearch
      type: pserv
      envVarKey: ELASTIC_PASSWORD
  - key: DBNAME
    fromDatabase:
      name: temporal-db
      property: database
  - key: DB_PORT
    fromDatabase:
      name: temporal-db
      property: port
  - key: POSTGRES_USER
    fromDatabase:
      name: temporal-db
      property: user
  - key: POSTGRES_PWD
    fromDatabase:
      name: temporal-db
      property: password
  - key: POSTGRES_SEEDS
    fromDatabase:
      name: temporal-db
      property: host
- type: pserv
  name: temporal-history
  autoDeploy: false
  plan: Starter
  region: oregon
  env: docker
  dockerfilePath: ./temporal-cluster/server/Dockerfile
  scaling:
    minInstances: 1
    maxInstances: 3
    targetMemoryPercent: 80
    targetCPUPercent: 80
  envVars:
  - fromGroup: temporal-shared
  - key: SERVICES
    value: history
  - key: TEMPORAL_FRONTEND_HOST
    fromService:
      name: temporal-frontend
      type: pserv
      property: host
  - key: ES_SEEDS
    fromService:
      name: temporal-elasticsearch
      type: pserv
      property: host
  - key: ES_PWD
    fromService:
      name: temporal-elasticsearch
      type: pserv
      envVarKey: ELASTIC_PASSWORD
  - key: DBNAME
    fromDatabase:
      name: temporal-db
      property: database
  - key: POSTGRES_USER
    fromDatabase:
      name: temporal-db
      property: user
  - key: POSTGRES_PWD
    fromDatabase:
      name: temporal-db
      property: password
  - key: POSTGRES_SEEDS
    fromDatabase:
      name: temporal-db
      property: host
- type: pserv
  name: temporal-matching
  autoDeploy: false
  plan: Starter
  region: oregon
  env: docker
  dockerfilePath: ./temporal-cluster/server/Dockerfile
  scaling:
    minInstances: 1
    maxInstances: 3
    targetMemoryPercent: 80
    targetCPUPercent: 80
  envVars:
  - fromGroup: temporal-shared
  - key: SERVICES
    value: matching
  - key: TEMPORAL_FRONTEND_HOST
    fromService:
      name: temporal-frontend
      type: pserv
      property: host
  - key: ES_SEEDS
    fromService:
      name: temporal-elasticsearch
      type: pserv
      property: host
  - key: ES_PWD
    fromService:
      name: temporal-elasticsearch
      type: pserv
      envVarKey: ELASTIC_PASSWORD
  - key: DBNAME
    fromDatabase:
      name: temporal-db
      property: database
  - key: POSTGRES_USER
    fromDatabase:
      name: temporal-db
      property: user
  - key: POSTGRES_PWD
    fromDatabase:
      name: temporal-db
      property: password
  - key: POSTGRES_SEEDS
    fromDatabase:
      name: temporal-db
      property: host
- type: pserv
  autoDeploy: false
  name: temporal-worker
  plan: Starter
  region: oregon
  env: docker
  dockerfilePath: ./temporal-cluster/server/Dockerfile
  scaling:
    minInstances: 1
    maxInstances: 3
    targetMemoryPercent: 80
    targetCPUPercent: 80
  envVars:
  - fromGroup: temporal-shared
  # The worker service needs to wait for the history service to be up first,
  # otherwise it will fail with "error starting scanner".
  - key: DEPENDS_ON_HISTORY
    fromService:
      name: temporal-history
      type: pserv
      property: host
  - key: SERVICES
    value: worker
  - key: TEMPORAL_FRONTEND_HOST
    fromService:
      name: temporal-frontend
      type: pserv
      property: host
  - key: ES_SEEDS
    fromService:
      name: temporal-elasticsearch
      type: pserv
      property: host
  - key: ES_PWD
    fromService:
      name: temporal-elasticsearch
      type: pserv
      envVarKey: ELASTIC_PASSWORD
  - key: DBNAME
    fromDatabase:
      name: temporal-db
      property: database
  - key: POSTGRES_USER
    fromDatabase:
      name: temporal-db
      property: user
  - key: POSTGRES_PWD
    fromDatabase:
      name: temporal-db
      property: password
  - key: POSTGRES_SEEDS
    fromDatabase:
      name: temporal-db
      property: host
- type: pserv
  name: temporal-ui
  autoDeploy: false
  plan: Starter
  region: oregon
  env: docker
  dockerfilePath: ./temporal-cluster/web/Dockerfile
  envVars:
  - key: PORT
    value: 8088
  - key: TEMPORAL_PERMIT_WRITE_API
    value: true
  - key: TEMPORAL_GRPC_HOST
    fromService:
      name: temporal-frontend
      type: pserv
      property: host
# For secure external access to the Temporal Workflow Service via REST
# See https://github.com/render-examples/temporal-rest-proxy
- type: web
  name: rest-to-grpc-proxy
  repo: https://github.com/render-examples/temporal-rest-proxy
  autoDeploy: false
  plan: Starter
  region: oregon
  env: go
  buildCommand: go build rest-proxy/main.go
  startCommand: ./main
  envVars:
  - key: TEMPORAL_CLUSTER_HOST
    fromService:
      name: temporal-frontend
      type: pserv
      property: host
  - key: AUTH_TOKEN
    sync: false
- type: web
  repo: https://github.com/render-examples/sample-temporal-app
  name: app-workflow-trigger
  plan: Starter
  region: oregon
  env: go
  buildCommand: go build start/main.go
  startCommand: ./main
  envVars:
  - key: TEMPORAL_CLUSTER_HOST
    fromService:
      name: temporal-frontend
      type: pserv
      property: host
- type: worker
  repo: https://github.com/render-examples/sample-temporal-app
  name: app-worker
  plan: Starter
  region: oregon
  env: go
  buildCommand: go build worker/main.go
  startCommand: ./main
  envVars:
  - key: TEMPORAL_CLUSTER_HOST
    fromService:
      name: temporal-frontend
      type: pserv
      property: host
